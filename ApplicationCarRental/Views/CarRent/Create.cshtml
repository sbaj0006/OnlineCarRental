@model ApplicationCarRental.ViewModel.CarRentalViewModel
@using ApplicationCarRental.Utility
@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h3>Add New Car Rental</h3>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Email, new { id = "email", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Brand, new { id = "carBrand", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Rego, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Rego, new { id = "carRego", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Rego, "", new { @class = "text-danger" })
            </div>
        </div>
        @{
            List<SelectListItem> listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = SD.OneMonth,
                Value = SD.OneMonthCount
            });
            listItems.Add(new SelectListItem
            {
                Text = SD.TwoMonth,
                Value = SD.TwoMonthCount
            });
        }

        <div class="form-group">
            @Html.LabelFor(model => model.RentalDuration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.RentalDuration, listItems, new { id = "ddlRentalDuration", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.RentalDuration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="nameAndDob" style="display:none">
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.Label(" ", new { id = "firstName", style = "width:350px;", @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.Label(" ", new { id = "birthDate", style = "width:350px;", @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.RentalPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.Label(" ", new { id = "lblRentalPrice", style = "width:350px;", @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Availability, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.Label(" ", new { id = "lblAvaibility", style = "width:350px;", @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Check Availability" id="btnAvailibility" class="btn btn-sm btn-success" />
                <input type="submit" value="Book" id="btnSubmit" style="display:none;" class="btn btn-sm btn-success" />
            </div>
        </div>

    </div>
}

@section scripts{

    <script>
        $(document).ready(function () {
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('email'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                // `states` is an array of state names defined in "The Basics"
                remote: {
                    url: '/Api/UsersAPI?type=email&query=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            $('#email').typeahead({ highlight: true, minLength: 3 },
                {
                    name: 'customers',
                    display: 'Email',
                    source: customers
                });
            var carBrand = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Brand'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                // `states` is an array of state names defined in "The Basics"
                remote: {
                    url: '/Api/CarAPI?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            $('#carBrand').typeahead({ highlight: true, minLength: 3 },
                {
                    name: 'carBrand',
                    display: 'Brand',
                    source: carBrand
                });
        });

        $('#btnAvailibility').click(function () {
            var rego = document.getElementById("carRego").value;
            var email = document.getElementById("email").value;
            var rentalDuration = document.getElementById("ddlRentalDuration").value;
            $.ajax({
                url: '/Api/CarAPI?type=avail&rego=' + rego,
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    $('#lblAvaibility').text(data + ' available')
                    if (data > 0) {
                        document.getElementById('btnSubmit').style.display = '';
                    }
                    else {
                        document.getElementById('btnSubmit').value = "Not Available";
                        document.getElementById('btnSubmit').style.display = '';
                        document.getElementById('btnSubmit').disabled = true;
                        document.getElementById('btnSubmit').classList.remove('btn-success');
                        document.getElementById('btnSubmit').classList.add('btn-danger');
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                }
            });
            $.ajax({
                url: '/Api/CarAPI?type=price&rego=' + rego + '&rentalDuration=' + rentalDuration + '&email=' + email,
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    $('#lblRentalPrice').text(data)
                },
                error: function (xhr, textStatus, errorThrown) {
                }
            });
            $.ajax({
                url: '/Api/UsersAPI?type=name&query=' + email,
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    var fields = data.split(';');
                    $('#firstName').text(fields[0])
                    var birthDate = fields[1].split(' ')
                    $('#birthDate').text(birthDate[0])
                    document.getElementById("btnAvailibility").style.display = 'none';
                    document.getElementById("nameAndDob").style.display = '';
                },
                error: function (xhr, textStatus, errorThrown) {
                }
            });
        });



    </script>
}

